{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, Optional, Self, Input, HostBinding, HostListener, InjectionToken, Pipe, Inject, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/material/core';\nimport { mixinErrorState } from '@angular/material/core';\nimport * as i3 from '@angular/forms';\n/**\n * The files to be uploaded\n */\n\nclass FileInput {\n  constructor(_files, delimiter = ', ') {\n    this._files = _files;\n    this.delimiter = delimiter;\n    this._fileNames = (this._files || []).map(f => f.name).join(delimiter);\n  }\n\n  get files() {\n    return this._files || [];\n  }\n\n  get fileNames() {\n    return this._fileNames;\n  }\n\n} // Boilerplate for applying mixins to FileInput\n\n/** @docs-private */\n\n\nclass FileInputBase {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n}\n/**\n * Allows to use a custom ErrorStateMatcher with the file-input component\n */\n\n\nconst FileInputMixinBase = mixinErrorState(FileInputBase);\n\nclass FileInputComponent extends FileInputMixinBase {\n  /**\n   * @see https://angular.io/api/forms/ControlValueAccessor\n   */\n  constructor(fm, _elementRef, _renderer, _defaultErrorStateMatcher, ngControl, _parentForm, _parentFormGroup) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this.fm = fm;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this.ngControl = ngControl;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.focused = false;\n    this.controlType = 'file-input';\n    this.autofilled = false;\n    this._required = false;\n    this.accept = null;\n    this.id = `ngx-mat-file-input-${FileInputComponent.nextId++}`;\n    this.describedBy = '';\n\n    this._onChange = _ => {};\n\n    this._onTouched = () => {};\n\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n    }\n\n    fm.monitor(_elementRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  setDescribedByIds(ids) {\n    this.describedBy = ids.join(' ');\n  }\n\n  get value() {\n    return this.empty ? null : new FileInput(this._elementRef.nativeElement.value || []);\n  }\n\n  set value(fileInput) {\n    if (fileInput) {\n      this.writeValue(fileInput);\n      this.stateChanges.next();\n    }\n  }\n\n  get multiple() {\n    return this._multiple;\n  }\n\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  get placeholder() {\n    return this._placeholder;\n  }\n\n  set placeholder(plh) {\n    this._placeholder = plh;\n    this.stateChanges.next();\n  }\n  /**\n   * Whether the current input has files\n   */\n\n\n  get empty() {\n    return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;\n  }\n\n  get shouldLabelFloat() {\n    return this.focused || !this.empty || this.valuePlaceholder !== undefined;\n  }\n\n  get required() {\n    return this._required;\n  }\n\n  set required(req) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  get isDisabled() {\n    return this.disabled;\n  }\n\n  get disabled() {\n    return this._elementRef.nativeElement.disabled;\n  }\n\n  set disabled(dis) {\n    this.setDisabledState(coerceBooleanProperty(dis));\n    this.stateChanges.next();\n  }\n\n  onContainerClick(event) {\n    if (event.target.tagName.toLowerCase() !== 'input' && !this.disabled) {\n      this._elementRef.nativeElement.querySelector('input').focus();\n\n      this.focused = true;\n      this.open();\n    }\n  }\n\n  get fileNames() {\n    return this.value ? this.value.fileNames : this.valuePlaceholder;\n  }\n\n  writeValue(obj) {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj instanceof FileInput ? obj.files : null);\n  }\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * Remove all files from the file input component\n   * @param [event] optional event that may have triggered the clear action\n   */\n\n\n  clear(event) {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    this.value = new FileInput([]);\n    this._elementRef.nativeElement.querySelector('input').value = null;\n\n    this._onChange(this.value);\n  }\n\n  change(event) {\n    const fileList = event.target.files;\n    const fileArray = [];\n\n    if (fileList) {\n      for (let i = 0; i < fileList.length; i++) {\n        fileArray.push(fileList[i]);\n      }\n    }\n\n    this.value = new FileInput(fileArray);\n\n    this._onChange(this.value);\n  }\n\n  blur() {\n    this.focused = false;\n\n    this._onTouched();\n  }\n\n  setDisabledState(isDisabled) {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  ngOnInit() {\n    this.multiple = coerceBooleanProperty(this.multiple);\n  }\n\n  open() {\n    if (!this.disabled) {\n      this._elementRef.nativeElement.querySelector('input').click();\n    }\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this.fm.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n}\n\nFileInputComponent.nextId = 0;\n\nFileInputComponent.ɵfac = function FileInputComponent_Factory(t) {\n  return new (t || FileInputComponent)(i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.ErrorStateMatcher), i0.ɵɵdirectiveInject(i3.NgControl, 10), i0.ɵɵdirectiveInject(i3.NgForm, 8), i0.ɵɵdirectiveInject(i3.FormGroupDirective, 8));\n};\n\nFileInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FileInputComponent,\n  selectors: [[\"ngx-mat-file-input\"]],\n  hostVars: 6,\n  hostBindings: function FileInputComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"change\", function FileInputComponent_change_HostBindingHandler($event) {\n        return ctx.change($event);\n      })(\"focusout\", function FileInputComponent_focusout_HostBindingHandler() {\n        return ctx.blur();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n      i0.ɵɵattribute(\"aria-describedby\", ctx.describedBy);\n      i0.ɵɵclassProp(\"mat-form-field-should-float\", ctx.shouldLabelFloat)(\"file-input-disabled\", ctx.isDisabled);\n    }\n  },\n  inputs: {\n    autofilled: \"autofilled\",\n    valuePlaceholder: \"valuePlaceholder\",\n    accept: \"accept\",\n    errorStateMatcher: \"errorStateMatcher\",\n    value: \"value\",\n    multiple: \"multiple\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    disabled: \"disabled\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: FileInputComponent\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 4,\n  consts: [[\"type\", \"file\"], [\"input\", \"\"], [1, \"filename\", 3, \"title\"]],\n  template: function FileInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"input\", 0, 1);\n      i0.ɵɵelementStart(2, \"span\", 2);\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"multiple\", ctx.multiple ? \"\" : null)(\"accept\", ctx.accept);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"title\", ctx.fileNames);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.fileNames);\n    }\n  },\n  styles: [\"[_nghost-%COMP%]{display:inline-block;width:100%}[_nghost-%COMP%]:not(.file-input-disabled){cursor:pointer}input[_ngcontent-%COMP%]{width:0px;height:0px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename[_ngcontent-%COMP%]{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FileInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-file-input',\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: FileInputComponent\n      }],\n      template: \"<input #input type=\\\"file\\\" [attr.multiple]=\\\"multiple? '' : null\\\" [attr.accept]=\\\"accept\\\">\\n<span class=\\\"filename\\\" [title]=\\\"fileNames\\\">{{ fileNames }}</span>\\n\",\n      styles: [\":host{display:inline-block;width:100%}:host:not(.file-input-disabled){cursor:pointer}input{width:0px;height:0px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i1.FocusMonitor\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i2.ErrorStateMatcher\n    }, {\n      type: i3.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: i3.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    autofilled: [{\n      type: Input\n    }],\n    valuePlaceholder: [{\n      type: Input\n    }],\n    accept: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    id: [{\n      type: HostBinding\n    }],\n    describedBy: [{\n      type: HostBinding,\n      args: ['attr.aria-describedby']\n    }],\n    value: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    shouldLabelFloat: [{\n      type: HostBinding,\n      args: ['class.mat-form-field-should-float']\n    }],\n    required: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: HostBinding,\n      args: ['class.file-input-disabled']\n    }],\n    disabled: [{\n      type: Input\n    }],\n    change: [{\n      type: HostListener,\n      args: ['change', ['$event']]\n    }],\n    blur: [{\n      type: HostListener,\n      args: ['focusout']\n    }]\n  });\n})();\n/**\n * Optional token to provide custom configuration to the module\n */\n\n\nconst NGX_MAT_FILE_INPUT_CONFIG = new InjectionToken('ngx-mat-file-input.config');\n\nclass ByteFormatPipe {\n  constructor(config) {\n    this.config = config;\n    this.unit = config ? config.sizeUnit : 'Byte';\n  }\n\n  transform(value, args) {\n    if (parseInt(value, 10) >= 0) {\n      value = this.formatBytes(+value, +args);\n    }\n\n    return value;\n  }\n\n  formatBytes(bytes, decimals) {\n    if (bytes === 0) {\n      return '0 ' + this.unit;\n    }\n\n    const B = this.unit.charAt(0);\n    const k = 1024;\n    const dm = decimals || 2;\n    const sizes = [this.unit, 'K' + B, 'M' + B, 'G' + B, 'T' + B, 'P' + B, 'E' + B, 'Z' + B, 'Y' + B];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n  }\n\n}\n\nByteFormatPipe.ɵfac = function ByteFormatPipe_Factory(t) {\n  return new (t || ByteFormatPipe)(i0.ɵɵdirectiveInject(NGX_MAT_FILE_INPUT_CONFIG, 24));\n};\n\nByteFormatPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"byteFormat\",\n  type: ByteFormatPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ByteFormatPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'byteFormat'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NGX_MAT_FILE_INPUT_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nclass MaterialFileInputModule {}\n\nMaterialFileInputModule.ɵfac = function MaterialFileInputModule_Factory(t) {\n  return new (t || MaterialFileInputModule)();\n};\n\nMaterialFileInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MaterialFileInputModule\n});\nMaterialFileInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [FocusMonitor]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaterialFileInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FileInputComponent, ByteFormatPipe],\n      providers: [FocusMonitor],\n      exports: [FileInputComponent, ByteFormatPipe]\n    }]\n  }], null, null);\n})();\n\nclass FileValidator {\n  /**\n   * Function to control content of files\n   *\n   * @param bytes max number of bytes allowed\n   *\n   * @returns\n   */\n  static maxContentSize(bytes) {\n    return control => {\n      const size = control && control.value ? control.value.files.map(f => f.size).reduce((acc, i) => acc + i, 0) : 0;\n      const condition = bytes >= size;\n      return condition ? null : {\n        maxContentSize: {\n          actualSize: size,\n          maxSize: bytes\n        }\n      };\n    };\n  }\n\n} // Module\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ByteFormatPipe, FileInput, FileInputComponent, FileValidator, MaterialFileInputModule, NGX_MAT_FILE_INPUT_CONFIG };","map":{"version":3,"sources":["C:/Users/USER/Desktop/aih-apac/aih-apac-material/aih-apac/node_modules/ngx-material-file-input/fesm2015/ngx-material-file-input.mjs"],"names":["i0","Component","Optional","Self","Input","HostBinding","HostListener","InjectionToken","Pipe","Inject","NgModule","i1","FocusMonitor","MatFormFieldControl","coerceBooleanProperty","i2","mixinErrorState","i3","FileInput","constructor","_files","delimiter","_fileNames","map","f","name","join","files","fileNames","FileInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","FileInputMixinBase","FileInputComponent","fm","_elementRef","_renderer","focused","controlType","autofilled","_required","accept","id","nextId","describedBy","_onChange","_","_onTouched","valueAccessor","monitor","nativeElement","subscribe","origin","stateChanges","next","setDescribedByIds","ids","value","empty","fileInput","writeValue","multiple","_multiple","placeholder","_placeholder","plh","length","shouldLabelFloat","valuePlaceholder","undefined","required","req","isDisabled","disabled","dis","setDisabledState","onContainerClick","event","target","tagName","toLowerCase","querySelector","focus","open","obj","setProperty","registerOnChange","fn","registerOnTouched","clear","preventDefault","stopPropagation","change","fileList","fileArray","i","push","blur","ngOnInit","click","ngOnDestroy","complete","stopMonitoring","ngDoCheck","updateErrorState","ɵfac","ElementRef","Renderer2","ErrorStateMatcher","NgControl","NgForm","FormGroupDirective","ɵcmp","provide","useExisting","type","args","selector","providers","template","styles","decorators","errorStateMatcher","NGX_MAT_FILE_INPUT_CONFIG","ByteFormatPipe","config","unit","sizeUnit","transform","parseInt","formatBytes","bytes","decimals","B","charAt","k","dm","sizes","Math","floor","log","parseFloat","pow","toFixed","ɵpipe","MaterialFileInputModule","ɵmod","ɵinj","declarations","exports","FileValidator","maxContentSize","control","size","reduce","acc","condition","actualSize","maxSize"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, Optional, Self, Input, HostBinding, HostListener, InjectionToken, Pipe, Inject, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/material/core';\nimport { mixinErrorState } from '@angular/material/core';\nimport * as i3 from '@angular/forms';\n\n/**\n * The files to be uploaded\n */\nclass FileInput {\n    constructor(_files, delimiter = ', ') {\n        this._files = _files;\n        this.delimiter = delimiter;\n        this._fileNames = (this._files || []).map((f) => f.name).join(delimiter);\n    }\n    get files() {\n        return this._files || [];\n    }\n    get fileNames() {\n        return this._fileNames;\n    }\n}\n\n// Boilerplate for applying mixins to FileInput\n/** @docs-private */\nclass FileInputBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/**\n * Allows to use a custom ErrorStateMatcher with the file-input component\n */\nconst FileInputMixinBase = mixinErrorState(FileInputBase);\n\nclass FileInputComponent extends FileInputMixinBase {\n    /**\n     * @see https://angular.io/api/forms/ControlValueAccessor\n     */\n    constructor(fm, _elementRef, _renderer, _defaultErrorStateMatcher, ngControl, _parentForm, _parentFormGroup) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this.fm = fm;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this.ngControl = ngControl;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.focused = false;\n        this.controlType = 'file-input';\n        this.autofilled = false;\n        this._required = false;\n        this.accept = null;\n        this.id = `ngx-mat-file-input-${FileInputComponent.nextId++}`;\n        this.describedBy = '';\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        if (this.ngControl != null) {\n            this.ngControl.valueAccessor = this;\n        }\n        fm.monitor(_elementRef.nativeElement, true).subscribe(origin => {\n            this.focused = !!origin;\n            this.stateChanges.next();\n        });\n    }\n    setDescribedByIds(ids) {\n        this.describedBy = ids.join(' ');\n    }\n    get value() {\n        return this.empty ? null : new FileInput(this._elementRef.nativeElement.value || []);\n    }\n    set value(fileInput) {\n        if (fileInput) {\n            this.writeValue(fileInput);\n            this.stateChanges.next();\n        }\n    }\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(plh) {\n        this._placeholder = plh;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the current input has files\n     */\n    get empty() {\n        return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;\n    }\n    get shouldLabelFloat() {\n        return this.focused || !this.empty || this.valuePlaceholder !== undefined;\n    }\n    get required() {\n        return this._required;\n    }\n    set required(req) {\n        this._required = coerceBooleanProperty(req);\n        this.stateChanges.next();\n    }\n    get isDisabled() {\n        return this.disabled;\n    }\n    get disabled() {\n        return this._elementRef.nativeElement.disabled;\n    }\n    set disabled(dis) {\n        this.setDisabledState(coerceBooleanProperty(dis));\n        this.stateChanges.next();\n    }\n    onContainerClick(event) {\n        if (event.target.tagName.toLowerCase() !== 'input' && !this.disabled) {\n            this._elementRef.nativeElement.querySelector('input').focus();\n            this.focused = true;\n            this.open();\n        }\n    }\n    get fileNames() {\n        return this.value ? this.value.fileNames : this.valuePlaceholder;\n    }\n    writeValue(obj) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj instanceof FileInput ? obj.files : null);\n    }\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Remove all files from the file input component\n     * @param [event] optional event that may have triggered the clear action\n     */\n    clear(event) {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        this.value = new FileInput([]);\n        this._elementRef.nativeElement.querySelector('input').value = null;\n        this._onChange(this.value);\n    }\n    change(event) {\n        const fileList = event.target.files;\n        const fileArray = [];\n        if (fileList) {\n            for (let i = 0; i < fileList.length; i++) {\n                fileArray.push(fileList[i]);\n            }\n        }\n        this.value = new FileInput(fileArray);\n        this._onChange(this.value);\n    }\n    blur() {\n        this.focused = false;\n        this._onTouched();\n    }\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    ngOnInit() {\n        this.multiple = coerceBooleanProperty(this.multiple);\n    }\n    open() {\n        if (!this.disabled) {\n            this._elementRef.nativeElement.querySelector('input').click();\n        }\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.fm.stopMonitoring(this._elementRef.nativeElement);\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n}\nFileInputComponent.nextId = 0;\nFileInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: FileInputComponent, deps: [{ token: i1.FocusMonitor }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i2.ErrorStateMatcher }, { token: i3.NgControl, optional: true, self: true }, { token: i3.NgForm, optional: true }, { token: i3.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nFileInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.2\", type: FileInputComponent, selector: \"ngx-mat-file-input\", inputs: { autofilled: \"autofilled\", valuePlaceholder: \"valuePlaceholder\", accept: \"accept\", errorStateMatcher: \"errorStateMatcher\", value: \"value\", multiple: \"multiple\", placeholder: \"placeholder\", required: \"required\", disabled: \"disabled\" }, host: { listeners: { \"change\": \"change($event)\", \"focusout\": \"blur()\" }, properties: { \"id\": \"this.id\", \"attr.aria-describedby\": \"this.describedBy\", \"class.mat-form-field-should-float\": \"this.shouldLabelFloat\", \"class.file-input-disabled\": \"this.isDisabled\" } }, providers: [{ provide: MatFormFieldControl, useExisting: FileInputComponent }], usesInheritance: true, ngImport: i0, template: \"<input #input type=\\\"file\\\" [attr.multiple]=\\\"multiple? '' : null\\\" [attr.accept]=\\\"accept\\\">\\n<span class=\\\"filename\\\" [title]=\\\"fileNames\\\">{{ fileNames }}</span>\\n\", styles: [\":host{display:inline-block;width:100%}:host:not(.file-input-disabled){cursor:pointer}input{width:0px;height:0px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}\\n\"] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: FileInputComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-mat-file-input', providers: [{ provide: MatFormFieldControl, useExisting: FileInputComponent }], template: \"<input #input type=\\\"file\\\" [attr.multiple]=\\\"multiple? '' : null\\\" [attr.accept]=\\\"accept\\\">\\n<span class=\\\"filename\\\" [title]=\\\"fileNames\\\">{{ fileNames }}</span>\\n\", styles: [\":host{display:inline-block;width:100%}:host:not(.file-input-disabled){cursor:pointer}input{width:0px;height:0px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i1.FocusMonitor }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i2.ErrorStateMatcher }, { type: i3.NgControl, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }] }, { type: i3.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i3.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { autofilled: [{\n                type: Input\n            }], valuePlaceholder: [{\n                type: Input\n            }], accept: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], id: [{\n                type: HostBinding\n            }], describedBy: [{\n                type: HostBinding,\n                args: ['attr.aria-describedby']\n            }], value: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], shouldLabelFloat: [{\n                type: HostBinding,\n                args: ['class.mat-form-field-should-float']\n            }], required: [{\n                type: Input\n            }], isDisabled: [{\n                type: HostBinding,\n                args: ['class.file-input-disabled']\n            }], disabled: [{\n                type: Input\n            }], change: [{\n                type: HostListener,\n                args: ['change', ['$event']]\n            }], blur: [{\n                type: HostListener,\n                args: ['focusout']\n            }] } });\n\n/**\n * Optional token to provide custom configuration to the module\n */\nconst NGX_MAT_FILE_INPUT_CONFIG = new InjectionToken('ngx-mat-file-input.config');\n\nclass ByteFormatPipe {\n    constructor(config) {\n        this.config = config;\n        this.unit = config ? config.sizeUnit : 'Byte';\n    }\n    transform(value, args) {\n        if (parseInt(value, 10) >= 0) {\n            value = this.formatBytes(+value, +args);\n        }\n        return value;\n    }\n    formatBytes(bytes, decimals) {\n        if (bytes === 0) {\n            return '0 ' + this.unit;\n        }\n        const B = this.unit.charAt(0);\n        const k = 1024;\n        const dm = decimals || 2;\n        const sizes = [this.unit, 'K' + B, 'M' + B, 'G' + B, 'T' + B, 'P' + B, 'E' + B, 'Z' + B, 'Y' + B];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    }\n}\nByteFormatPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: ByteFormatPipe, deps: [{ token: NGX_MAT_FILE_INPUT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Pipe });\nByteFormatPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: ByteFormatPipe, name: \"byteFormat\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: ByteFormatPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'byteFormat'\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [NGX_MAT_FILE_INPUT_CONFIG]\n                    }] }];\n    } });\n\nclass MaterialFileInputModule {\n}\nMaterialFileInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MaterialFileInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMaterialFileInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MaterialFileInputModule, declarations: [FileInputComponent, ByteFormatPipe], exports: [FileInputComponent, ByteFormatPipe] });\nMaterialFileInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MaterialFileInputModule, providers: [FocusMonitor] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MaterialFileInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [FileInputComponent, ByteFormatPipe],\n                    providers: [FocusMonitor],\n                    exports: [FileInputComponent, ByteFormatPipe]\n                }]\n        }] });\n\nclass FileValidator {\n    /**\n     * Function to control content of files\n     *\n     * @param bytes max number of bytes allowed\n     *\n     * @returns\n     */\n    static maxContentSize(bytes) {\n        return (control) => {\n            const size = control && control.value ? control.value.files.map(f => f.size).reduce((acc, i) => acc + i, 0) : 0;\n            const condition = bytes >= size;\n            return condition\n                ? null\n                : {\n                    maxContentSize: {\n                        actualSize: size,\n                        maxSize: bytes\n                    }\n                };\n        };\n    }\n}\n\n// Module\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ByteFormatPipe, FileInput, FileInputComponent, FileValidator, MaterialFileInputModule, NGX_MAT_FILE_INPUT_CONFIG };\n"]},"metadata":{},"sourceType":"module"}